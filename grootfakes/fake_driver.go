// Code generated by counterfeiter. DO NOT EDIT.
package grootfakes

import (
	"io"
	"sync"

	"code.cloudfoundry.org/groot"
	"code.cloudfoundry.org/lager"
	runspec "github.com/opencontainers/runtime-spec/specs-go"
)

type FakeDriver struct {
	BundleStub        func(logger lager.Logger, bundleID string, layerIDs []string, diskLimit int64) (runspec.Spec, error)
	bundleMutex       sync.RWMutex
	bundleArgsForCall []struct {
		logger    lager.Logger
		bundleID  string
		layerIDs  []string
		diskLimit int64
	}
	bundleReturns struct {
		result1 runspec.Spec
		result2 error
	}
	bundleReturnsOnCall map[int]struct {
		result1 runspec.Spec
		result2 error
	}
	DeleteStub        func(logger lager.Logger, bundleID string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		logger   lager.Logger
		bundleID string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	StatsStub        func(logger lager.Logger, bundleID string) (groot.VolumeStats, error)
	statsMutex       sync.RWMutex
	statsArgsForCall []struct {
		logger   lager.Logger
		bundleID string
	}
	statsReturns struct {
		result1 groot.VolumeStats
		result2 error
	}
	statsReturnsOnCall map[int]struct {
		result1 groot.VolumeStats
		result2 error
	}
	WriteMetadataStub        func(logger lager.Logger, bundleID string, imageMetadata groot.ImageMetadata) error
	writeMetadataMutex       sync.RWMutex
	writeMetadataArgsForCall []struct {
		logger        lager.Logger
		bundleID      string
		imageMetadata groot.ImageMetadata
	}
	writeMetadataReturns struct {
		result1 error
	}
	writeMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	UnpackStub        func(logger lager.Logger, layerID string, parentIDs []string, layerTar io.Reader) (int64, error)
	unpackMutex       sync.RWMutex
	unpackArgsForCall []struct {
		logger    lager.Logger
		layerID   string
		parentIDs []string
		layerTar  io.Reader
	}
	unpackReturns struct {
		result1 int64
		result2 error
	}
	unpackReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDriver) Bundle(logger lager.Logger, bundleID string, layerIDs []string, diskLimit int64) (runspec.Spec, error) {
	var layerIDsCopy []string
	if layerIDs != nil {
		layerIDsCopy = make([]string, len(layerIDs))
		copy(layerIDsCopy, layerIDs)
	}
	fake.bundleMutex.Lock()
	ret, specificReturn := fake.bundleReturnsOnCall[len(fake.bundleArgsForCall)]
	fake.bundleArgsForCall = append(fake.bundleArgsForCall, struct {
		logger    lager.Logger
		bundleID  string
		layerIDs  []string
		diskLimit int64
	}{logger, bundleID, layerIDsCopy, diskLimit})
	fake.recordInvocation("Bundle", []interface{}{logger, bundleID, layerIDsCopy, diskLimit})
	fake.bundleMutex.Unlock()
	if fake.BundleStub != nil {
		return fake.BundleStub(logger, bundleID, layerIDs, diskLimit)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.bundleReturns.result1, fake.bundleReturns.result2
}

func (fake *FakeDriver) BundleCallCount() int {
	fake.bundleMutex.RLock()
	defer fake.bundleMutex.RUnlock()
	return len(fake.bundleArgsForCall)
}

func (fake *FakeDriver) BundleArgsForCall(i int) (lager.Logger, string, []string, int64) {
	fake.bundleMutex.RLock()
	defer fake.bundleMutex.RUnlock()
	return fake.bundleArgsForCall[i].logger, fake.bundleArgsForCall[i].bundleID, fake.bundleArgsForCall[i].layerIDs, fake.bundleArgsForCall[i].diskLimit
}

func (fake *FakeDriver) BundleReturns(result1 runspec.Spec, result2 error) {
	fake.BundleStub = nil
	fake.bundleReturns = struct {
		result1 runspec.Spec
		result2 error
	}{result1, result2}
}

func (fake *FakeDriver) BundleReturnsOnCall(i int, result1 runspec.Spec, result2 error) {
	fake.BundleStub = nil
	if fake.bundleReturnsOnCall == nil {
		fake.bundleReturnsOnCall = make(map[int]struct {
			result1 runspec.Spec
			result2 error
		})
	}
	fake.bundleReturnsOnCall[i] = struct {
		result1 runspec.Spec
		result2 error
	}{result1, result2}
}

func (fake *FakeDriver) Delete(logger lager.Logger, bundleID string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		logger   lager.Logger
		bundleID string
	}{logger, bundleID})
	fake.recordInvocation("Delete", []interface{}{logger, bundleID})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(logger, bundleID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeDriver) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeDriver) DeleteArgsForCall(i int) (lager.Logger, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].logger, fake.deleteArgsForCall[i].bundleID
}

func (fake *FakeDriver) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) Stats(logger lager.Logger, bundleID string) (groot.VolumeStats, error) {
	fake.statsMutex.Lock()
	ret, specificReturn := fake.statsReturnsOnCall[len(fake.statsArgsForCall)]
	fake.statsArgsForCall = append(fake.statsArgsForCall, struct {
		logger   lager.Logger
		bundleID string
	}{logger, bundleID})
	fake.recordInvocation("Stats", []interface{}{logger, bundleID})
	fake.statsMutex.Unlock()
	if fake.StatsStub != nil {
		return fake.StatsStub(logger, bundleID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.statsReturns.result1, fake.statsReturns.result2
}

func (fake *FakeDriver) StatsCallCount() int {
	fake.statsMutex.RLock()
	defer fake.statsMutex.RUnlock()
	return len(fake.statsArgsForCall)
}

func (fake *FakeDriver) StatsArgsForCall(i int) (lager.Logger, string) {
	fake.statsMutex.RLock()
	defer fake.statsMutex.RUnlock()
	return fake.statsArgsForCall[i].logger, fake.statsArgsForCall[i].bundleID
}

func (fake *FakeDriver) StatsReturns(result1 groot.VolumeStats, result2 error) {
	fake.StatsStub = nil
	fake.statsReturns = struct {
		result1 groot.VolumeStats
		result2 error
	}{result1, result2}
}

func (fake *FakeDriver) StatsReturnsOnCall(i int, result1 groot.VolumeStats, result2 error) {
	fake.StatsStub = nil
	if fake.statsReturnsOnCall == nil {
		fake.statsReturnsOnCall = make(map[int]struct {
			result1 groot.VolumeStats
			result2 error
		})
	}
	fake.statsReturnsOnCall[i] = struct {
		result1 groot.VolumeStats
		result2 error
	}{result1, result2}
}

func (fake *FakeDriver) WriteMetadata(logger lager.Logger, bundleID string, imageMetadata groot.ImageMetadata) error {
	fake.writeMetadataMutex.Lock()
	ret, specificReturn := fake.writeMetadataReturnsOnCall[len(fake.writeMetadataArgsForCall)]
	fake.writeMetadataArgsForCall = append(fake.writeMetadataArgsForCall, struct {
		logger        lager.Logger
		bundleID      string
		imageMetadata groot.ImageMetadata
	}{logger, bundleID, imageMetadata})
	fake.recordInvocation("WriteMetadata", []interface{}{logger, bundleID, imageMetadata})
	fake.writeMetadataMutex.Unlock()
	if fake.WriteMetadataStub != nil {
		return fake.WriteMetadataStub(logger, bundleID, imageMetadata)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.writeMetadataReturns.result1
}

func (fake *FakeDriver) WriteMetadataCallCount() int {
	fake.writeMetadataMutex.RLock()
	defer fake.writeMetadataMutex.RUnlock()
	return len(fake.writeMetadataArgsForCall)
}

func (fake *FakeDriver) WriteMetadataArgsForCall(i int) (lager.Logger, string, groot.ImageMetadata) {
	fake.writeMetadataMutex.RLock()
	defer fake.writeMetadataMutex.RUnlock()
	return fake.writeMetadataArgsForCall[i].logger, fake.writeMetadataArgsForCall[i].bundleID, fake.writeMetadataArgsForCall[i].imageMetadata
}

func (fake *FakeDriver) WriteMetadataReturns(result1 error) {
	fake.WriteMetadataStub = nil
	fake.writeMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) WriteMetadataReturnsOnCall(i int, result1 error) {
	fake.WriteMetadataStub = nil
	if fake.writeMetadataReturnsOnCall == nil {
		fake.writeMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) Unpack(logger lager.Logger, layerID string, parentIDs []string, layerTar io.Reader) (int64, error) {
	var parentIDsCopy []string
	if parentIDs != nil {
		parentIDsCopy = make([]string, len(parentIDs))
		copy(parentIDsCopy, parentIDs)
	}
	fake.unpackMutex.Lock()
	ret, specificReturn := fake.unpackReturnsOnCall[len(fake.unpackArgsForCall)]
	fake.unpackArgsForCall = append(fake.unpackArgsForCall, struct {
		logger    lager.Logger
		layerID   string
		parentIDs []string
		layerTar  io.Reader
	}{logger, layerID, parentIDsCopy, layerTar})
	fake.recordInvocation("Unpack", []interface{}{logger, layerID, parentIDsCopy, layerTar})
	fake.unpackMutex.Unlock()
	if fake.UnpackStub != nil {
		return fake.UnpackStub(logger, layerID, parentIDs, layerTar)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.unpackReturns.result1, fake.unpackReturns.result2
}

func (fake *FakeDriver) UnpackCallCount() int {
	fake.unpackMutex.RLock()
	defer fake.unpackMutex.RUnlock()
	return len(fake.unpackArgsForCall)
}

func (fake *FakeDriver) UnpackArgsForCall(i int) (lager.Logger, string, []string, io.Reader) {
	fake.unpackMutex.RLock()
	defer fake.unpackMutex.RUnlock()
	return fake.unpackArgsForCall[i].logger, fake.unpackArgsForCall[i].layerID, fake.unpackArgsForCall[i].parentIDs, fake.unpackArgsForCall[i].layerTar
}

func (fake *FakeDriver) UnpackReturns(result1 int64, result2 error) {
	fake.UnpackStub = nil
	fake.unpackReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeDriver) UnpackReturnsOnCall(i int, result1 int64, result2 error) {
	fake.UnpackStub = nil
	if fake.unpackReturnsOnCall == nil {
		fake.unpackReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.unpackReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeDriver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bundleMutex.RLock()
	defer fake.bundleMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.statsMutex.RLock()
	defer fake.statsMutex.RUnlock()
	fake.writeMetadataMutex.RLock()
	defer fake.writeMetadataMutex.RUnlock()
	fake.unpackMutex.RLock()
	defer fake.unpackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDriver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.Driver = new(FakeDriver)
