// Code generated by counterfeiter. DO NOT EDIT.
package imagepullerfakes

import (
	"io"
	"sync"

	"code.cloudfoundry.org/groot/imagepuller"
	"code.cloudfoundry.org/lager/v3"
)

type FakeFetcher struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	ImageInfoStub        func(lager.Logger) (imagepuller.ImageInfo, error)
	imageInfoMutex       sync.RWMutex
	imageInfoArgsForCall []struct {
		arg1 lager.Logger
	}
	imageInfoReturns struct {
		result1 imagepuller.ImageInfo
		result2 error
	}
	imageInfoReturnsOnCall map[int]struct {
		result1 imagepuller.ImageInfo
		result2 error
	}
	StreamBlobStub        func(lager.Logger, imagepuller.LayerInfo) (io.ReadCloser, int64, error)
	streamBlobMutex       sync.RWMutex
	streamBlobArgsForCall []struct {
		arg1 lager.Logger
		arg2 imagepuller.LayerInfo
	}
	streamBlobReturns struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}
	streamBlobReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFetcher) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFetcher) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeFetcher) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeFetcher) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFetcher) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFetcher) ImageInfo(arg1 lager.Logger) (imagepuller.ImageInfo, error) {
	fake.imageInfoMutex.Lock()
	ret, specificReturn := fake.imageInfoReturnsOnCall[len(fake.imageInfoArgsForCall)]
	fake.imageInfoArgsForCall = append(fake.imageInfoArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	stub := fake.ImageInfoStub
	fakeReturns := fake.imageInfoReturns
	fake.recordInvocation("ImageInfo", []interface{}{arg1})
	fake.imageInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFetcher) ImageInfoCallCount() int {
	fake.imageInfoMutex.RLock()
	defer fake.imageInfoMutex.RUnlock()
	return len(fake.imageInfoArgsForCall)
}

func (fake *FakeFetcher) ImageInfoCalls(stub func(lager.Logger) (imagepuller.ImageInfo, error)) {
	fake.imageInfoMutex.Lock()
	defer fake.imageInfoMutex.Unlock()
	fake.ImageInfoStub = stub
}

func (fake *FakeFetcher) ImageInfoArgsForCall(i int) lager.Logger {
	fake.imageInfoMutex.RLock()
	defer fake.imageInfoMutex.RUnlock()
	argsForCall := fake.imageInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFetcher) ImageInfoReturns(result1 imagepuller.ImageInfo, result2 error) {
	fake.imageInfoMutex.Lock()
	defer fake.imageInfoMutex.Unlock()
	fake.ImageInfoStub = nil
	fake.imageInfoReturns = struct {
		result1 imagepuller.ImageInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeFetcher) ImageInfoReturnsOnCall(i int, result1 imagepuller.ImageInfo, result2 error) {
	fake.imageInfoMutex.Lock()
	defer fake.imageInfoMutex.Unlock()
	fake.ImageInfoStub = nil
	if fake.imageInfoReturnsOnCall == nil {
		fake.imageInfoReturnsOnCall = make(map[int]struct {
			result1 imagepuller.ImageInfo
			result2 error
		})
	}
	fake.imageInfoReturnsOnCall[i] = struct {
		result1 imagepuller.ImageInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeFetcher) StreamBlob(arg1 lager.Logger, arg2 imagepuller.LayerInfo) (io.ReadCloser, int64, error) {
	fake.streamBlobMutex.Lock()
	ret, specificReturn := fake.streamBlobReturnsOnCall[len(fake.streamBlobArgsForCall)]
	fake.streamBlobArgsForCall = append(fake.streamBlobArgsForCall, struct {
		arg1 lager.Logger
		arg2 imagepuller.LayerInfo
	}{arg1, arg2})
	stub := fake.StreamBlobStub
	fakeReturns := fake.streamBlobReturns
	fake.recordInvocation("StreamBlob", []interface{}{arg1, arg2})
	fake.streamBlobMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeFetcher) StreamBlobCallCount() int {
	fake.streamBlobMutex.RLock()
	defer fake.streamBlobMutex.RUnlock()
	return len(fake.streamBlobArgsForCall)
}

func (fake *FakeFetcher) StreamBlobCalls(stub func(lager.Logger, imagepuller.LayerInfo) (io.ReadCloser, int64, error)) {
	fake.streamBlobMutex.Lock()
	defer fake.streamBlobMutex.Unlock()
	fake.StreamBlobStub = stub
}

func (fake *FakeFetcher) StreamBlobArgsForCall(i int) (lager.Logger, imagepuller.LayerInfo) {
	fake.streamBlobMutex.RLock()
	defer fake.streamBlobMutex.RUnlock()
	argsForCall := fake.streamBlobArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFetcher) StreamBlobReturns(result1 io.ReadCloser, result2 int64, result3 error) {
	fake.streamBlobMutex.Lock()
	defer fake.streamBlobMutex.Unlock()
	fake.StreamBlobStub = nil
	fake.streamBlobReturns = struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeFetcher) StreamBlobReturnsOnCall(i int, result1 io.ReadCloser, result2 int64, result3 error) {
	fake.streamBlobMutex.Lock()
	defer fake.streamBlobMutex.Unlock()
	fake.StreamBlobStub = nil
	if fake.streamBlobReturnsOnCall == nil {
		fake.streamBlobReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 int64
			result3 error
		})
	}
	fake.streamBlobReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.imageInfoMutex.RLock()
	defer fake.imageInfoMutex.RUnlock()
	fake.streamBlobMutex.RLock()
	defer fake.streamBlobMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ imagepuller.Fetcher = new(FakeFetcher)
